---
title: "STAT4255 Homework 2"
author: "Jack Bienvenue"
date: "2024-09-24"
format: html
---

Hello! In this assignment, we will be working on several exercises from the ISLP book:

Let's begin by importing our modules:

``` {python}
import pandas as pd
import numpy as np
import statsmodels.api as sm
import matplotlib.pyplot as plt
import random 
from statsmodels.stats.outliers_influence \
    import variance_inflation_factor as VIF
from statsmodels.stats.anova import anova_lm
from ISLP import load_data
from ISLP.models import (ModelSpec as MS,
                         summarize, poly)
```

## Exercise 1 - 3.3
Suppose we have a data set with five predictors:

- **X1** = GPA
- **X2** = IQ
- **X3** = Level (1 for College and 0 for High School)
- **X4** = Interaction between GPA and IQ
- **X5** = Interaction between GPA and Level

**The response is starting salary after graduation (in thousands of dollars).**

Suppose we use least squares to fit the model, and get:

- βˆ0 = 50,
- βˆ1 = 20,
- βˆ2 = 0.07,
- βˆ3 = 35,
- βˆ4 = 0.01,
- βˆ5 = −10.

### (a) Which answer is correct, and why?

- i. For a fixed value of IQ and GPA, high school graduates earn more, on average, than college graduates.
- ii. For a fixed value of IQ and GPA, college graduates earn more, on average, than high school graduates.
- iii. For a fixed value of IQ and GPA, high school graduates earn more, on average, than college graduates provided that the GPA is high enough.
- iv. For a fixed value of IQ and GPA, college graduates earn more, on average, than high school graduates provided that the GPA is high enough.

For this question, we will select answer **ii**. All else equal, our model indicates that a college graduate could be expected to earn an additional $35,000 a year as compared to a high school graduate. 

### (b) Predict the salary of a college graduate with IQ of 110 and a GPA of 4.0.

Let's apply these conditions to our model. 

$$Y = 20 * 4.0 + 110 * 0.07 + 1 * 35 + 0.01*100*4.0 + -10 * 4.0 * 1$$

This would work out to a prediction of an annual salary of $86,700.

### (c) True or false: Since the coefficient for the GPA/IQ interaction term is very small, there is very little evidence of an interaction effect. Justify your answer.

False. The magnitude of the interaction term does not determine whether an interaction effect is present. To examine this, we would instead have to look towards the p-value and whether it meets our specifications. Regardless, the small magnitude means that the term won't influence predictions much.


## Exercise 2 - 3.4
I collect a set of data (n = 100 observations) containing a single predictor and a quantitative response. I then fit a linear regression model to the data, as well as a separate cubic regression, i.e. $$Y = \beta_0 + \beta_1 X + \beta_2 X^2 + \beta_3 X^3 + \varepsilon.$$

### (a) Suppose that the true relationship between X and Y is linear, i.e. $Y = \beta_0 + \beta_1 X + \epsilon$. Consider the training residual sum of squares (RSS) for the linear regression, and also the training RSS for the cubic regression. Would we expect one to be lower than the other, would we expect them to be the same, or is there not enough information to tell? Justify your answer.

While it is not intuitive, if we have truly linear relationship and fit a cubic model, we may still actually find a reduction in RSS versus the linear model. Why is this? The additional terms in the model may allow for closer fitting of the available data. Because we know that the nature of the relationship is linear, though, this would be *overfitting* behavior and could harm predictions, especially predictions past the extent of the data. 

### (b) Answer (a) using test rather than training RSS.

To complete this section of the exercise, we will need to make a function to generate data which follows a linear relationship. Let's also generate functions for finding linear and cubic models and their respective RSS's. This will be handy in our response to the **(d)** as well. 

``` {python}
def generate_linear_data(n=100, slope=1, intercept=0, noise_var = 1):
    
    X = np.random.uniform(1,10,n)
    # Normally distributed noise
    noise = np.random.normal(0, noise_var, n)
    
    Y = slope * X + intercept + noise

    # df generation

    data = pd.DataFrame({'X': X, 'Y': Y})
    
    return data

#Let's now define modeling fxns:
def fit_linear_model(data):
    X = sm.add_constant(data['X'])  # Adds intercept term
    model = sm.OLS(data['Y'], X).fit()
    predictions = model.predict(X)
    rss = np.sum((data['Y'] - predictions) ** 2)
    return rss, model

def fit_cubic_model(data):
    data['X_squared'] = data['X'] ** 2
    data['X_cubed'] = data['X'] ** 3
    X = sm.add_constant(data[['X', 'X_squared', 'X_cubed']])  # Adds intercept term
    model = sm.OLS(data['Y'], X).fit()
    predictions = model.predict(X)
    rss = np.sum((data['Y'] - predictions) ** 2)
    return rss, model

```

Time to test:

``` {python}
# Run linear data generating fxn:
data = generate_linear_data()

lin_rss, lin_model = fit_linear_model(data)
cubic_rss, cubic_model = fit_cubic_model(data)

print(f"Linear Model RSS: {lin_rss:.2f}")
print(f"Cubic Model RSS: {cubic_rss:.2f}")

## Plotting:
# Data
plt.scatter(data['X'], data['Y'], alpha=0.7, label='Data Points')

# Linear Model
plt.plot(data['X'], lin_model.predict(sm.add_constant(data['X'])), color='red', label='Linear Fit', linewidth=2)

# Cubic Model
X_sorted = np.sort(data['X'])
Y_cubic = cubic_model.predict(sm.add_constant(pd.DataFrame({'X': X_sorted, 'X_squared': X_sorted**2, 'X_cubed': X_sorted**3})))
plt.plot(X_sorted, Y_cubic, color='green', label='Cubic Fit', linewidth=2)

plt.title("Generated Linear Data with Fits")
plt.xlabel("X")
plt.ylabel("Y")
plt.legend()
plt.grid()
plt.show()

```

We find our expected result after experimentation. 

### (c) Suppose that the true relationship between X and Y is not linear, but we don’t know how far it is from linear. Consider the training RSS for the linear regression, and also the training RSS for the cubic regression. Would we expect one to be lower than the other, would we expect them to be the same, or is there not enough information to tell? Justify your answer.

Here we would still expect that the RSS for the cubic model would be lower. The nature of the cubic model allows it to fit itself more closely to a dataset because the additional terms can provide flexibility to move the model line in ways the linear model cannot.

### (d) Answer (c) using test rather than training RSS.

As an example here, let's use logarithmic data as a substitute for linear data. Let's make a generating function and test it:

``` {python}
def generate_log_data(n=100, a=2, b=1, noise_variance=1):
    # Generate predictor values (start after zero to prevent log(0))
    X = np.random.uniform(0.1, 10, n) 

    noise = np.random.normal(0, noise_variance, n)  # Normally distributed noise in data
    Y = a * np.log(X) + b + noise
    
    # DataFrame synthesis:
    data = pd.DataFrame({'X': X, 'Y': Y})
    
    return data

log_data = generate_log_data()

lin_rss, lin_model = fit_linear_model(data)
cubic_rss, cubic_model = fit_cubic_model(data)

print(f"Linear Model RSS: {lin_rss:.2f}")
print(f"Cubic Model RSS: {cubic_rss:.2f}")

## Plotting:
# Data
plt.scatter(log_data['X'], log_data['Y'], alpha=0.7, label='Data Points')

# Linear Model
plt.plot(log_data['X'], lin_model.predict(sm.add_constant(log_data['X'])), color='red', label='Linear Fit', linewidth=2)

# Cubic Model
X_sorted = np.sort(log_data['X'])
Y_cubic = cubic_model.predict(sm.add_constant(pd.DataFrame({'X': X_sorted, 'X_squared': X_sorted**2, 'X_cubed': X_sorted**3})))
plt.plot(X_sorted, Y_cubic, color='green', label='Cubic Fit', linewidth=2)

plt.title("Generated Linear Data with Fits")
plt.xlabel("X")
plt.ylabel("Y")
plt.legend()
plt.grid()
plt.show()

```

Again, we find by testing that we attain our hypothesized result.

## Exercise 3 - 3.10 (a-g)

**This question should be answered using the Carseats data set.**

Let's begin by importing the dataset:
``` {python}
Carseats = load_data('Carseats') # Using built-in ISLP functionality
```

Let's take a peek at what the dataset looks like:

``` {python}
print(Carseats.head())
```

### (a) Fit a multiple regression model to predict Sales using Price, Urban, and US.

Let's build this out:

``` {python}
## Cleaning
# Categorical Variable handling
Carseats['Urban'] = Carseats['Urban'].map({'Yes': 1, 'No': 0})
Carseats['US'] = Carseats['US'].map({'Yes': 1, 'No': 0})

# Define responses and predictor
X = Carseats[['Price', 'Urban', 'US']]
y = Carseats['Sales']

# Add intercept
X = sm.add_constant(X)

# Fit MLR model
model = sm.OLS(y, X).fit()

print(model.summary())
```

### (b) Provide an interpretation of each coefficient in the model. Be careful—some of the variables in the model are qualitative!

- Price
    - Based upon our model, we find that for every dollar increase in price of the carseat, we observe a decline in sales by 0.0545, on average, in this linear model. Our units for sales are thousands of unit sales, so for each increase in price by $1, we would expect a reduction of 54.5 sales. 

- Urban
    - *Urban* indicates whether the retailer for the car seats are in an urban or rural location. This variable is encoded in binary fasion. We find that our model estimates that being in an urban location would reduce the expected sales by 21.9 units versus a rural area, all else equal. However, by any reasonable benchmark for p-value, this variable would not be considered significant. 

- US
    - *US* indicates whether the retailer for the car seats is in the US. We find that our estimates that being in the US increases sales by 1200.6 units on average in this linear model versus not being in the US. This could be due to many things, perhaps regulations requiring car seats or perhaps attitudes towards car seats that make it more likely for parents in the United States to buy them.

### (c) Write out the model in equation form, being careful to handle the qualitative variables properly.

We can write out our formula for our model in the following way:

$$  Y = \beta_0 + \beta_1*X_1 + \beta_2*X_2 + \beta_3*X_3  $$

where:

- $\beta_0$ represents the intercept
- $\beta_1$ represents the coefficient for predictor 'Price'
- $\beta_2$ represents the coefficient for predictor 'Urban'
- $\beta_3$ represents the coefficient for predictor 'US'

- $X_1$ represents the price, in US dollars, of the car seat
- $X_2$ represents the urban/rural status
    - $X_2$ = 1 indicates urban
    - $X_2$ = 0 indicates rural
- $X_3$ represents the domestic/foreign selling status
    - $X_3$ = 1 indicates selling in US
    - $X_3$ = 0 indicates selling outside US

### (d) For which of the predictors can you reject the null hypothesis H0 :βj =0?

We can reject the null hypothesis that $H_0: \beta_j = 0$ for coefficients $\beta_0$, $\beta_1$, and $\beta_3$. The p-values are less than 0.001, meaning that they would be rejected under any reasonable threshold. 

### (e) On the basis of your response to the previous question, fit a smaller model that only uses the predictors for which there is evidence of association with the outcome.

Let's fit the new model, this time excluding the "Urban" term:

``` {python}
# Here, we can use our linear model generating function again, but we'll clip out the unnecessary column

newdata = Carseats.drop(columns=['Urban'])

X = newdata[['Price', 'US']]
X = sm.add_constant(X)
y = newdata['Sales']

model_drop_urban = sm.OLS(y, X).fit()

print(model_drop_urban.summary())

```

### (f) How well do the models in (a) and (e) fit the data?

It appears that both models fit the data in a way that is very similar to one another. The coefficients are not changed very much from one model to another and $R^2$ is essentially the same for each model. Upon inspection of the models, it seems that they both have useful components, but that the included variables do not provide a holistic review of the factors that influence sales, since the whole model's $R^2$ value is around 24%. 

### (g) Using the model from (e), obtain 95% confidence intervals for the coefficient(s).

Conveniently, the 95% confidence intervals for the values of the coefficients are included in the printout. We can see for:

- $\beta_0$
    - The 95% confidence interval ranges from 11.790 to 14.271
- $\beta_1$
    - The 95% confidence interval ranges from -0.065 to -0.044
- $\beta_3$
    - The 95% confidence interval ranges from 0.692 to 1.708

## Exercise 4 - 3.13

**13. In this exercise you will create some simulated data and will fit simple linear regression models to it. Make sure to use the default random number generator with seed set to 1 prior to starting part (a) to ensure consistent results.**

``` {python}
np.random.seed(1)
```

### (a) Using the normal() method of your random number generator, create a vector, x, containing 100 observations drawn from a N(0,1) distribution. This represents a feature, X.

Let's find a way to do this:

``` {python}
x = np.random.normal(0, 1, 100) # N(0,1), 100 observations
```

### (b) Using the normal() method, create a vector, eps, containing 100 observations drawn from a N(0,0.25) distribution—a normal distribution with mean zero and variance 0.25.

``` {python}
eps = np.random.normal(0, 0.25, 100)
```

### (c) Using x and eps, generate a vector y according to the model Y =−1+0.5X+ε. What is the length of the vector y? What are the values of β0 and β1 in this linear model?

``` {python}
y = np.zeros(100) # placeholders

ex4df = pd.DataFrame({'x': x, 'eps': eps, 'y': y})

# Now we have to calculate out y:
ex4df['y'] = -1 + 0.5 * ex4df['x'] + ex4df['eps']
# Check if this worked:
print(ex4df.head())

print(f'Length of y is: {len(ex4df["y"])}')

```

Based upon this linear model,

- $\beta_0 = -1$
- $\beta_1 = 0.5$

### (d) Create a scatterplot displaying the relationship between x and y. Comment on what you observe.

``` {python}


```

### (e) Fit a least squares linear model to predict y using x. Comment on the model obtained. How do βˆ0 and βˆ1 compare to β0 and β1?

``` {python}


```

### (f) Display the least squares line on the scatterplot obtained in (d). Draw the population regression line on the plot, in a different color. Use the legend() method of the axes to create an appropriate legend.

``` {python}


```

### (g) Now fit a polynomial regression model that predicts y using x and x2. Is there evidence that the quadratic term improves the model fit? Explain your answer.

``` {python}


```

### (h) Repeat (a)–(f) after modifying the data generation process in such a way that there is less noise in the data. The model (3.39) should remain the same. You can do this by decreasing the vari- ance of the normal distribution used to generate the error term ε in (b). Describe your results.

``` {python}


```

### (i) Repeat (a)–(f) after modifying the data generation process in such a way that there is more noise in the data. The model (3.39) should remain the same. You can do this by increasing the variance of the normal distribution used to generate the error term ε in (b). Describe your results.

``` {python}


```

### (j) What are the confidence intervals for β0 and β1 based on the original data set, the noisier data set, and the less noisy data set? Comment on your results.

``` {python}


```


## Exercise 5 - 3.15

This problem involves the Boston data set, which we saw in the lab for this chapter. We will now try to predict per capita crime rate using the other variables in this data set. In other words, per capita crime rate is the response, and the other variables are the predictors.

Import dataset:
``` {python}

```

### (a) For each predictor, fit a simple linear regression model to predict the response. Describe your results. In which of the models is there a statistically significant association between the predictor and the response? Create some plots to back up your assertions.

``` {python}


```

### (b) Fit a multiple regression model to predict the response using all of the predictors. Describe your results. For which predictors can we reject the null hypothesis H0 : βj = 0?

``` {python}


```

### (c) How do your results from (a) compare to your results from (b)? Create a plot displaying the univariate regression coefficients from (a) on the x-axis, and the multiple regression coefficients from (b) on the y-axis. That is, each predictor is displayed as a single point in the plot. Its coefficient in a simple linear regres- sion model is shown on the x-axis, and its coefficient estimate in the multiple linear regression model is shown on the y-axis.

``` {python}


```

### (d) Is there evidence of non-linear association between any of the predictors and the response? To answer this question, for each predictor X, fit a model of the form Y =β0 +β1X+β2X2 +β3X3 +ε.

``` {python}


```
